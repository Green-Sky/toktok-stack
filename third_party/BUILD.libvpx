load("@toktok//third_party/yasm:build_defs.bzl", "asm_library")

asm_library(
    name = "assemblies",
    srcs = glob([
        "vp*/**/x86/*.asm",
        "vpx_ports/emms.asm",
    ]),
    hdrs = [
        "third_party/x86inc/x86inc.asm",
        "vpx_dsp/x86/bitdepth_conversion_sse2.asm",
        "vpx_ports/x86_abi_support.asm",
        "@toktok//third_party/libvpx:vpx_config.asm",
    ],
    asmopts = [
        "-I$(GENDIR)/external/libvpx",  # Generated headers.
        "-Iexternal/libvpx",
        "-Iexternal/toktok/third_party/libvpx",
    ],
)

genrule(
    name = "regen_config",
    srcs = glob(["**/*"]),
    outs = [
        "vpx_config.asm",
        "vpx_config.h",
        "vpx_version.h",
        "libs-x86_64-linux-gcc.mk",
    ],
    cmd = """
        export PATH=$$PWD/$$(dirname $(location @yasm)):$$PATH
        cd `dirname $(location configure)`
        ./configure --disable-avx512 --disable-webm-io --enable-pic --enable-shared --enable-vp9-temporal-denoising --enable-vp9-highbitdepth --enable-error-concealment --enable-internal-stats
        make vpx_version.h
        DIR=`pwd`
        cd -
        for i in $(OUTS); do
          cp $$DIR/`basename $$i` $$i
        done
    """,
    tools = ["@yasm"],
)

[genrule(
    name = "%s_rtcd" % mod,
    srcs = [
        "build/make/rtcd.pl",
        "@toktok//third_party/libvpx:libs-x86_64-linux-gcc.mk",
        defs,
    ],
    outs = ["%s_rtcd.h" % mod],
    cmd = " ".join([
        "$(location build/make/rtcd.pl)",
        "--arch=x86_64",
        "--sym=%s_rtcd" % mod,
        "--disable-avx512",
        "--config=$(location @toktok//third_party/libvpx:libs-x86_64-linux-gcc.mk)",
        "$(location %s)" % defs,
        "> $@",
    ]),
) for mod, defs in [
    ("vp8", "vp8/common/rtcd_defs.pl"),
    ("vp9", "vp9/common/vp9_rtcd_defs.pl"),
    ("vpx_dsp", "vpx_dsp/vpx_dsp_rtcd_defs.pl"),
    ("vpx_scale", "vpx_scale/vpx_scale_rtcd.pl"),
]]

cc_library(
    name = "headers",
    hdrs = glob(["**/*.h"]) + [
        "vp8_rtcd.h",
        "vp9_rtcd.h",
        "vpx_dsp_rtcd.h",
        "vpx_scale_rtcd.h",
    ],
    deps = [
        "@toktok//third_party/libvpx:vpx_config",
    ],
)

COMMON_SOURCES = glob(
    ["vp*/**/*.c"],
    exclude = [
        "**/arm/**",
        "**/mips/**",
        "**/ppc/**",
        "**/x86/*_avx2.c",
        "**/x86/*_avx512.c",
        "vp8/encoder/mr_dissim.c",
        "vpx_ports/arm_cpudetect.c",
        "vpx_ports/ppc_cpudetect.c",
    ],
)

COPTS = [
    "-fvisibility=protected",
    "-I$(GENDIR)/external/libvpx",
    "-Iexternal/libvpx",
    "-Wno-overflow",
]

cc_library(
    name = "libvpx_avx2",
    srcs = glob(["**/x86/*_avx2.c"]),
    copts = ["-mavx2"] + COPTS,
    deps = [":headers"],
)

cc_library(
    name = "libvpx",
    srcs = [":assemblies"] + COMMON_SOURCES,
    copts = COPTS,
    includes = ["."],
    linkopts = ["-lm"],
    visibility = ["//visibility:public"],
    deps = [
        ":headers",
        ":libvpx_avx2",
        "@toktok//third_party/libvpx:vpx_config",
        "@toktok//third_party/libvpx:vpx_version",
    ],
)
