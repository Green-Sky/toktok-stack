#!/usr/bin/env perl

use strict;
no warnings;
use utf8;

use v5.10.1;

use Data::Dumper;
use File::Find;
use IPC::Open2;

$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Terse    = 1;
$Data::Dumper::Indent   = 1;

my $INPLACE = $ARGV[0] eq "-i";
shift @ARGV if $INPLACE;

my @FILES = @ARGV or die "Usage: format-haskell [-i] <file|dir>...";

sub parse_file {
   my ($file) = @_;

   my @lines = do { open my $fh, '<', $file or die "$file: $!"; <$fh> };
   chomp for @lines;

   my @docs;
   my @code;

   my $in_code = 0;
   for (@lines) {
      if ($in_code) {
         if (/^\\end\{code\}$/) {
            $in_code = 0;
            push @docs, $_;
         } else {
            push @{ $code[0] }, $_;
         }
      } else {
         push @docs, $_;
         if (/^\\begin\{code\}$/) {
            $in_code = 1;
            unshift @code, ["-- CODE BLOCK " . scalar @code];
         }
      }
   }

   (\@lines, \@docs, map { @$_ } reverse @code)
}

sub stylish_haskell {
   my ($out, $in);
   my $pid = open2 $out, $in, "stylish-haskell";
   print $in "$_\n" for @_;
   close $in;

   my @code = <$out>;
   chomp for @code;
   waitpid $pid, 0;

   @code
}

sub format_file {
   my ($file) = @_;

   if ($file =~ /\.hs$/) {
      system "stylish-haskell", "-i", $file;
   } else {
      my ($lines, $docs, @code) = parse_file $file;
      @code = stylish_haskell @code;

      # Split processed code back into blocks.
      my @blocks;
      for (@code) {
         if (/^-- CODE BLOCK \d+$/) {
            push @blocks, [];
         } else {
            push @{ $blocks[$#blocks] }, $_;
         }
      }

      # Splice code into docs.
      my @result;
      for (@$docs) {
         push @result, $_;
         if (/^\\begin\{code\}$/) {
            push @result, @{ shift @blocks };
         }
      }

      if ($INPLACE) {
         if (@result ~~ @$lines) {
            # Nothing to do, no changes.
         } else {
            open my $fh, '>', $file or die "Could not open $file for writing: $!";
            print $fh "$_\n" for @result;
         }
      } else {
         print "$_\n" for @result;
      }
   }
}

for my $file (@FILES) {
   if (-f $file) {
      format_file $file;
   } else {
      find {
         wanted => sub {
            return unless /\.l?hs$/;
            format_file $_;
         }
      }, $file;
   }
}
